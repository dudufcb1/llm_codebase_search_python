"""FastMCP server for codebase search (LOCAL MODE - code-index-cli compatible).

This server is specifically designed to work with code-index-cli indexed workspaces.
It requires explicit qdrantCollection parameter from .codebase/state.json.

Use this when:
- Your workspace is indexed by code-index-cli
- You have access to .codebase/state.json
- Collection name is generated by code-index-cli (codebase-{uuid})

For default mode (auto hash calculation), use server.py instead.
"""
import sys
from typing import Optional, Literal
from fastmcp import FastMCP, Context
from fastmcp.exceptions import ToolError

try:
    from .config import settings
    from .embedder import Embedder
    from .judge import Judge, SearchResult as JudgeSearchResult
    from .qdrant_store import QdrantStore, SearchResult
except ImportError:
    from config import settings
    from embedder import Embedder
    from judge import Judge, SearchResult as JudgeSearchResult
    from qdrant_store import QdrantStore, SearchResult


# Initialize FastMCP server
mcp = FastMCP(
    name="codebase-search-local",
    version="0.1.0"
)

# Initialize services
embedder = Embedder(
    provider=settings.embedder_provider,
    api_key=settings.embedder_api_key,
    model_id=settings.embedder_model_id,
    base_url=settings.embedder_base_url
)

judge = Judge(
    provider=settings.judge_provider,
    api_key=settings.judge_api_key,
    model_id=settings.judge_model_id,
    max_tokens=settings.judge_max_tokens,
    temperature=settings.judge_temperature,
    base_url=settings.judge_base_url,
    system_prompt=settings.judge_system_prompt
)

qdrant_store = QdrantStore(
    url=settings.qdrant_url,
    api_key=settings.qdrant_api_key
)


def _format_search_results(query: str, qdrant_collection: str, results: list[SearchResult]) -> str:
    """Format search results as text."""
    if not results:
        return f'No se encontraron coincidencias para "{query}" en la colección "{qdrant_collection}".'

    formatted_parts = [f'Query: {query}', f'Collection: {qdrant_collection}', '']

    for result in results:
        formatted_parts.append(f'Ruta: {result.file_path}')
        formatted_parts.append(f'Score: {result.score:.4f}')
        formatted_parts.append(f'Líneas: {result.start_line}-{result.end_line}')
        formatted_parts.append('---')
        formatted_parts.append(result.code_chunk.strip())
        formatted_parts.append('')

    return '\n'.join(formatted_parts)


def _format_rerank_results(query: str, qdrant_collection: str, reranked: list, summary: Optional[str] = None) -> str:
    """Format reranked results as text."""
    if not reranked:
        return f'No se encontraron resultados relevantes para "{query}" en la colección "{qdrant_collection}".'

    formatted_parts = [f'Query: {query}', f'Collection: {qdrant_collection}', '']

    if summary:
        formatted_parts.append('=== RESUMEN ===')
        formatted_parts.append(summary)
        formatted_parts.append('')
        formatted_parts.append('=== RESULTADOS REORDENADOS ===')
        formatted_parts.append('')

    for result in reranked:
        formatted_parts.append(f'Ruta: {result.file_path}')
        formatted_parts.append(f'Relevancia: {result.relevancia:.4f}')
        formatted_parts.append(f'Score original: {result.score:.4f}')
        formatted_parts.append(f'Líneas: {result.start_line}-{result.end_line}')
        if result.razon:
            formatted_parts.append(f'Razón: {result.razon}')
        formatted_parts.append('---')
        formatted_parts.append(result.code_chunk.strip())
        formatted_parts.append('')

    return '\n'.join(formatted_parts)


@mcp.tool
async def superior_codebase_rerank(
    query: str,
    qdrant_collection: str,
    path: Optional[str] = None,
    mode: Literal["rerank", "summary"] = "rerank",
    ctx: Context = None
) -> str:
    """Realiza una búsqueda semántica y reordena los resultados usando un LLM Judge.

    Esta herramienta está diseñada para trabajar con workspaces indexados por code-index-cli.
    Requiere el nombre de colección explícito desde .codebase/state.json.

    Args:
        query: Texto natural a buscar en el código
        qdrant_collection: Nombre de colección Qdrant (REQUERIDO - desde .codebase/state.json)
        path: Prefijo de ruta opcional para filtrar resultados
        mode: Modo de operación - "rerank" solo reordena, "summary" incluye resumen
        ctx: FastMCP context for logging

    Returns:
        Resultados reordenados formateados como texto, opcionalmente con resumen
    """
    try:
        # Log request
        if ctx:
            await ctx.info(f"[Rerank LOCAL] Query: {query}, Collection: {qdrant_collection}, Mode: {mode}")
        else:
            print(f"[Rerank LOCAL] Query: {query}, Collection: {qdrant_collection}, Mode: {mode}", file=sys.stderr)

        # Validate inputs
        if not query or not query.strip():
            raise ToolError("El parámetro 'query' es requerido y no puede estar vacío.")

        if not qdrant_collection or not qdrant_collection.strip():
            raise ToolError(
                "El parámetro 'qdrantCollection' es requerido.\n\n"
                "Este servidor está configurado para modo LOCAL (code-index-cli).\n"
                "Debes leer el archivo .codebase/state.json del workspace y pasar el campo 'qdrantCollection'.\n\n"
                'Ejemplo: { "query": "login function", "qdrantCollection": "codebase-f93e99958acc444e" }'
            )

        # Step 1: Perform initial search
        if ctx:
            await ctx.info(f"[Rerank LOCAL] Buscando resultados para query: '{query}'")

        vector = await embedder.create_embedding(query)
        search_results = await qdrant_store.search(
            vector=vector,
            workspace_path="",  # Not used when collection_name is provided
            directory_prefix=path,
            min_score=settings.search_min_score,
            max_results=settings.search_max_results,
            collection_name=qdrant_collection
        )

        if not search_results:
            return f'No se encontraron resultados para "{query}" en la colección "{qdrant_collection}".'

        # Step 2: Convert to Judge format
        judge_results = [
            JudgeSearchResult(
                file_path=r.file_path,
                code_chunk=r.code_chunk,
                start_line=r.start_line,
                end_line=r.end_line,
                score=r.score
            )
            for r in search_results
        ]

        # Step 3: Rerank with LLM
        if ctx:
            await ctx.info(f"[Rerank LOCAL] Reordenando {len(judge_results)} resultados con LLM")

        reranked = await judge.rerank(query, judge_results)

        # Apply max results limit
        reranked = reranked[:settings.reranking_max_results]

        # Step 4: Generate summary if requested
        summary = None
        if mode == "summary":
            if ctx:
                await ctx.info("[Rerank LOCAL] Generando resumen")
            summary = await judge.summarize(query, judge_results)

        # Format and return results
        return _format_rerank_results(query, qdrant_collection, reranked, summary)

    except ToolError:
        raise
    except Exception as e:
        error_msg = str(e)
        if ctx:
            await ctx.info(f"[Rerank LOCAL] Fallback to search results due to: {error_msg}")
        else:
            print(f"[Rerank LOCAL] Fallback to search results due to: {error_msg}", file=sys.stderr)

        # Always return search results instead of error
        return _format_search_results(query, qdrant_collection, search_results)


# Entry point for fastmcp CLI
if __name__ == "__main__":
    print("[MCP] Servidor `codebase-search-local` inicializado y listo.", file=sys.stderr)
    mcp.run()
